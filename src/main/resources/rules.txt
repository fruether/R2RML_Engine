@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema> .
@prefix sl: <http://softlang.com/> .
@prefix maven: <http://softlang.com/plugins/maven/> .
@prefix technologies: <http://softlang.com/Plugins/> .
@prefix technologiesSmall: <http://softlang.com/plugins/> .


[XSDCheck:
    (?a sl:elementOf sl:XML)
    (?b sl:elementOf sl:XSD)
    (?a sl:partOf build1)
    (?b sl:partOf build2)
    notEqual(build1, build2)
    XSDCheck(?a,?b) ->
    (?a sl:conformsTo ?b)]

[DetectProjectDependencies:
    (?file sl:partOf ?build)
    (?file sl:conformsTo maven:maven-4.0.0.xsd)
    (?file  sl:references ?dependency) ->
    (?build sl:dependsOn ?dependency)]

[DetectLiquidBase:
    (?file sl:conformsTo maven:maven-4.0.0.xsd)
    liquidBaseDependencyCheck(?file) ->
    (?file sl:references technologies:liquidbase)]

[LanguageDetection:
    (?file sl:partOf ?build)
    (?file rdf:type sl:Artefact)
    Parse(?file, ?language)
    ->
    (?file sl:elementOf ?language)
]
[JavaClassIdentification:
    (?file sl:elementOf sl:Java)
    RetrieveClass(?file, ?classname)
    ->
    (?file sl:hasReference ?classname)
]

[DTDDetection:
    (?file sl:partOf ?build)
    (?file rdf:type sl:Artefact)
    FileEnding(?file, ".dtd")
    ->
    (?file sl:elementOf sl:DTD)
]
[DTDValidation:
    (?file1 sl:partOf ?build1)
    (?file1 sl:elementOf sl:XML)
    (?file2 sl:partOf ?build2)
    (?file2 sl:elementOf sl:DTD)
    DTDCheck(?file1, ?file2)
    ->
    (?file1 sl:conformsTo ?file2)
]

[HibernateDependency:
    (?file sl:conformsTo maven:maven-4.0.0.xsd)
    HibernateDependencyCheck(?file) ->
    (?file sl:references technologies:hibernate)
]
[HibernateRoles:
    (?file sl:partOf ?build1)
    (?file sl:elementOf sl:XML)
    (?file sl:conformsTo ?schema)
    (?schema sl:partOf sl:hibernate)
    HibernateRoleIdentification(?schema, ?role)
    ->
    (?file sl:hasRole ?role)
]
[HibernateReferences:
    (?file1 sl:hasRole technologies:Hibernate/HibernateConfiguration)
    (?file2 sl:hasRole sl:HibernateMapping)
    CheckReference(?file1, ?file2)
    ->
    (?file1 sl:HibernateConfigurationRefersToHibernateMapping ?file2)
]

[HibernateMappingFast:
    (?file1 sl:elementOf sl:XML)
    (?file1 sl:hasRole sl:HibernateMapping)
    HibernateMappingAnalysis(?file1, ?class)
    ->
    (?file1 sl:refersTo ?class)
]

[HibernateObjectDefinitionXMLMapping:
    (?file1 sl:hasRole sl:HibernateMapping)
    (?file1 sl:elementOf sl:XML)
    (?file2 sl:elementOf sl:Java)
    (?file2 sl:hasReference ?class)
    (?file1 sl:refersTo ?class)
    GetClassLiteral(?class, ?classLanguage)
    ->
    (?file2 sl:defines ?classLanguage)
    (?classLanguage rdf:type sl:Language)
    (?classLanguage sl:subsetOf sl:JVMObject)
    (?file2 sl:hasRole technologies:Hibernate/HibernatePersistedObject)
]

[HibernateObjectDefinitionJavaMapping:
    (?fragment sl:hasRole sl:HibernateMapping)
    (?fragment sl:elementOf sl:Language/JavaAnnotatedElement)
    (?fragment sl:partOf ?file)
    (?file sl:hasReference ?class)
    GetClassLiteral(?class, ?classLanguage)
    ->
    (?file sl:defines ?classLanguage)
    (?classLanguage rdf:type sl:Language)
    (?classLanguage sl:subsetOf sl:JVMObject)
    (?file sl:hasRole technologies:Hibernate/HibernatePersistedObject)
]

[HibernateMappingFunctionDefinitionXML:
    (?file sl:hasRole sl:HibernateMapping)
    (?file sl:elementOf sl:XML)
    HibernateGetMappingType(?file, ?function)
    ->
    (?file sl:defines ?function)
    (?function rdf:type sl:Function)
    (?function sl:partOf sl:OR-Mapping)
]

[HibernateMappingFunctionDefinitionJava:
    (?fragment sl:hasRole sl:HibernateMapping)
    (?fragment sl:elementOf sl:Language/JavaAnnotatedElement)
    (?fragment sl:partOf ?file)
    (?file sl:elementOf sl:Java)
    HibernateGetMappingType(?file, ?function)
    ->
    (?fragment sl:defines ?function)
    (?function rdf:type sl:Function)
    (?function sl:partOf sl:OR-Mapping)
]

[HibernateMappingConfFunctionDefinition:
    (?file sl:hasRole technologies:Hibernate/HibernateConfiguration)
    ->
    (?file sl:defines sl:OR-Mapping)
]
[HibernateMappingFunctionXMLInputDefinition:
    (?mappingFile sl:elementOf sl:XML)
    (?mappingFile sl:defines ?function)
    (?function sl:partOf sl:OR-Mapping)
    (?mappingFile sl:refersTo ?className)
    (?file sl:hasReference ?className)
    (?file sl:defines ?language)
    ->
    (?language sl:input ?function)
]

[HibernateMappingFunctionJavaInputDefinition:
    (?fragment sl:hasRole sl:HibernateMapping)
    (?fragment sl:elementOf sl:Language/JavaAnnotatedElement)
    (?fragment sl:partOf ?file)
    (?fragment sl:defines ?function)
    (?function sl:partOf sl:OR-Mapping)
    (?file sl:defines ?language)
    ->
    (?language sl:input ?function)
]


[HibernateMappingReferencedTables:
    (?file sl:hasRole sl:HibernateMapping)
    (?file sl:elementOf sl:XML)
    HibernateMappingGetTable(?file, ?table)
    ->
    (?file sl:HibernateMappingRefersToRelationalTable ?table)
]

[HibernateXMLMappingJavaCorrespondsToTable:
    (?file sl:hasRole sl:HibernateMapping)
    (?file sl:elementOf sl:XML)
    (?file sl:HibernateMappingRefersToRelationalTable ?tableUI)
    (?tableUI sl:elementOf sl:Language/ReferenceLanguage)
    (?tableUI sl:partOf ?fragment)
    (?fragment sl:elementOf sl:Language/SQLCreateTableStmt)
    (?file sl:refersTo ?class)
    (?javaFile sl:hasReference ?class)
    ->
    (?javaFile sl:correspondsTo ?fragment)
]

[HibernateJavaMappingJavaCorrespondsToTable:
    (?file sl:hasRole sl:HibernateMapping)
    (?file sl:elementOf sl:Language/JavaAnnotatedElement)
    (?file sl:HibernateMappingRefersToRelationalTable ?tableUI)
    (?tableUI sl:elementOf sl:Language/ReferenceLanguage)
    (?tableUI sl:partOf ?fragment)
    (?fragment sl:elementOf sl:Language/SQLCreateTableStmt)
    (?file sl:partOf ?javaFile)
    (?javaFile sl:elementOf sl:Java)
    ->
    (?javaFile sl:correspondsTo ?fragment)
]

[RelationalLanguageDefinition:
    (?fragment sl:elementOf sl:Language/SQLCreateTableStmt)
    (?tableName sl:partOf ?fragment)
    (?tableName sl:elementOf sl:Language/ReferenceLanguage)
    GetTableLiteral(?tableName, ?relationalLanguage)
    ->
    (?fragment sl:defines ?relationalLanguage)
    (?relationalLanguage rdf:type sl:Language)
    (?relationalLanguage sl:partOf sl:RelationalDatabase)
]

[HibernateMappingOutput:
    (?file sl:hasRole sl:HibernateMapping)
    (?file sl:defines ?function)
    (?file sl:HibernateMappingRefersToRelationalTable ?table)
    (?table sl:partOf ?sqlFragment)
    (?sqlFragment sl:defines ?relationalLanguage)
    ->
    (?function sl:output ?relationalLanguage)
]
[ExtractAndParseCreateStmts:
    (?file sl:elementOf sl:SQL)
    ->
    CreateStmtExtraction(?file)
]
[GetTableUri:
    (?fragment sl:elementOf sl:Language/SQLCreateTableStmt)
    ->
    RetrieveTableURI(?fragment)
]
[CheckAnnotationHibernate:
    (?file sl:elementOf sl:Java)
    CheckLiteralImported(?file, "javax.persistence")
    ->
    HibernateAnnotationDetection(?file)
]

[ImportDetection:
    (?file sl:elementOf sl:Java)
    (?package rdf:type sl:Package)
    CheckImport(?file, ?package)
    ->
    (?file sl:uses ?package)
]

[HibernateImportUsedDetection:
    (?file1 sl:elementOf sl:Java)
    (?package sl:partOf sl:hibernate)
    (?file1 sl:uses ?package)
    (?file2 sl:hasRole technologies:Hibernate/HibernatePersistedObject)
    notEqual(?file1, ?file2)
    (?file2 sl:hasReference ?class2)
    CheckClassReference(?file1, ?class2)
    (?file1 sl:hasReference ?class1)
    ->
    (?file1 sl:uses ?class2)
]

[HibernateServiceDiscovery:
    (?file sl:elementOf sl:Java)
    (?file sl:uses ?package)
    (?package sl:partOf sl:hibernate)
    (?file sl:uses ?class)
    (?filePers sl:hasReference ?class)
    (?filePers sl:hasRole technologies:Hibernate/HibernatePersistedObject)
    (?filePers sl:defines ?language)
    (?language sl:input ?function)
    (?function sl:partOf sl:OR-Mapping)
    ->
    (?file sl:indicatesUseOf ?function)
    (?file sl:hasRole technologies:Hibernate/HibernateService)

]


[CountMappingDefinitions:
    (?sth sl:hasRole  sl:HibernateMapping)
    (?sth sl:elementOf sl:Language/JavaAnnotatedElement)
    ->
    Count("HibernateMappingJava")
]
[CountMappingDefinitions:
    (?sth sl:hasRole  sl:HibernateMapping)
    (?sth sl:elementOf sl:XML)
    ->
    Count("HibernateMappingXML")
]

[CountCorespondenceXML:
    (?sth sl:hasRole  sl:HibernateMapping)
    (?sth sl:elementOf sl:XML)
    (?sth sl:refersTo ?class)
    (?file sl:hasReference ?class)
    (?file sl:correspondsTo ?table)
    ->
    Count("HibernateCorrespondenceByXML")
]

[CountCorespondenceJava:
    (?sth sl:hasRole  sl:HibernateMapping)
    (?sth sl:elementOf sl:Language/JavaAnnotatedElement)
    (?sth sl:partOf ?file)
    (?file sl:correspondsTo ?table)
    ->
    Count("HibernateCorrespondenceByJava")
]
[CountCorespondence:
    (?sth sl:correspondsTo ?sthElse)
    ->
    Count("HibernateCorrespondence")
]
[CountTableCreated:
    (?sth sl:elementOf sl:Language/SQLCreateTableStmt)
    ->
    Count("TableStatemtn")
]
[CountHibernateImports:
    (?file sl:uses ?package)
    (?package sl:partOf sl:hibernate)
     ->
    Count("HibernateImports", ?file)
]

[HibernateRefersToMapping:
    (?x sl:HibernateMappingRefersToRelationalTable ?y)
    (?x sl:elementOf sl:Language/JavaAnnotatedElement)
    ->
    Count("HibernateMappingRefersToRelationalTableJava")
]

[HibernateRefersToMapping:
    (?x sl:HibernateMappingRefersToRelationalTable ?y)
    ->
    Count("HibernateMappingRefersToRelationalTableAll")
]
[NotExistingTables:
    (?x sl:HibernateMappingRefersToRelationalTable ?y)
    unbound(?y)
    ->
    Count("ReferencesToNonExistingTables")
]
[NotExistingTables:
    (?x sl:HibernateMappingRefersToRelationalTable ?y)
    bound(?y)
    ->
    Count("ReferencesToExistingTables")
]
[DefinedFunction:
    (?x sl:hasRole sl:HibernateMapping)
    (?x sl:defines ?func)
    bound(?func)
    ->
    Count("ORMapping definition")
]
[NotWellFormedFunction:
    (?x sl:hasRole sl:HibernateMapping)
    (?x sl:defines ?func)
    (?y sl:input ?func)
    (?func sl:output ?y)
    unbound(?y)
    unbound(?x)
    ->
    Count("NotWellFormedORMapping")
]
[wellFormedFunction:
    (?x sl:hasRole sl:HibernateMapping)
    (?x sl:defines ?func)
    (?y sl:input ?func)
    (?func sl:output ?y)
    bound(?y)
    bound(?x)
    ->
    Count("WellFormedORMapping")
]
[UsedFunctions:
    (?x sl:indicatesUseOf ?function)
    (?function sl:partOf sl:OR-Mapping)
    ->
    Count("ImplementedFunctions")
    CountDistinct("ImplementedFunctionsDistinct", ?function)
]
[HelperFunction:
    (?z sl:indicatesUseOf ?function)
    (?function sl:partOf sl:OR-Mapping)
    ->
    (?function sl:backwardsUse ?z)
]

[HelperFunction2:
    (?x sl:elementOf sl:NotImplementedFunction)
    <-
    (?x sl:partOf sl:OR-Mapping)
    noValue(?x, sl:backwardsUse)
]


