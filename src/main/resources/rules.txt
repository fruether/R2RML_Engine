@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema> .
@prefix sl: <http://softlang.com/> .
@prefix maven: <http://softlang.com/plugins/maven/> .
@prefix technologies: <http://softlang.com/Plugins/> .
@prefix technologiesSmall: <http://softlang.com/plugins/> .


[XSDCheck:
    print(XSDCheck)
    (?a sl:elementOf sl:XML)
    (?b sl:elementOf sl:XSD)
    (?a sl:partOf build1)
    (?b sl:partOf build2)
    notEqual(build1, build2)
    XSDCheck(?a,?b) ->
    (?a sl:conformsTo ?b)]

[DetectProjectDependencies:
    print(DetectProjectDependencies)
    (?file sl:partOf ?build)
    (?file sl:conformsTo maven:maven-4.0.0.xsd)
    (?file  sl:references ?dependency) ->
    (?build sl:dependsOn ?dependency)]

[DetectLiquidBase:
    print(DetectLiquidBase)
    (?file sl:conformsTo maven:maven-4.0.0.xsd)
    liquidBaseDependencyCheck(?file) ->
    (?file sl:references technologies:liquidbase)]

[LanguageDetection:
    print(LanguageDetection)
    (?file sl:partOf ?build)
    (?file rdf:type sl:Artefact)
    Parse(?file, ?language)
    ->
    (?file sl:elementOf ?language)
]
[JavaClassIdentification:
    print(JavaClassIdentification)
    (?file sl:elementOf sl:Java)
    RetrieveClass(?file, ?classname)
    ->
    (?file sl:hasReference ?classname)
]

[DTDDetection:
    print(DTDDetection)
    (?file sl:partOf ?build)
    (?file rdf:type sl:Artefact)
    FileEnding(?file, ".dtd")
    ->
    (?file sl:elementOf sl:DTD)
]
[DTDValidation:
    print(DTDValidation)
    (?file1 sl:partOf ?build1)
    (?file1 sl:elementOf sl:XML)
    (?file2 sl:partOf ?build2)
    (?file2 sl:elementOf sl:DTD)
    DTDCheck(?file1, ?file2)
    ->
    (?file1 sl:conformsTo ?file2)
]

[HibernateDependency:
    print(HibernateDependency)
    (?file sl:conformsTo maven:maven-4.0.0.xsd)
    HibernateDependencyCheck(?file) ->
    (?file sl:references technologies:hibernate)
]
[HibernateRoles:
    print(HibernateRoles)
    (?file sl:partOf ?build1)
    (?file sl:elementOf sl:XML)
    (?file sl:conformsTo ?schema)
    (?schema sl:partOf sl:hibernate)
    HibernateRoleIdentification(?schema, ?role)
    ->
    (?file sl:hasRole ?role)
]
[HibernateReferences:
    print(HibernateReferences)
    (?file1 sl:hasRole technologies:Hibernate/HibernateConfiguration)
    (?file2 sl:hasRole sl:HibernateMapping)
    CheckReference(?file1, ?file2)
    ->
    (?file1 sl:HibernateConfigurationRefersToHibernateMapping ?file2)
]

[HibernateMappingFast:
    print(HibernateMappingFast)
    (?file1 sl:elementOf sl:XML)
    (?file1 sl:hasRole sl:HibernateMapping)
    HibernateMappingAnalysis(?file1, ?class)
    ->
    (?file1 sl:refersTo ?class)
]

[HibernateObjectDefinitionXMLMapping:
    print(HibernateObjectDefinitionXMLMapping)
    (?file1 sl:hasRole sl:HibernateMapping)
    (?file1 sl:elementOf sl:XML)
    (?file2 sl:elementOf sl:Java)
    (?file2 sl:hasReference ?class)
    (?file1 sl:refersTo ?class)
    GetClassLiteral(?class, ?classLanguage)
    ->
    (?file2 sl:defines ?classLanguage)
    (?classLanguage rdf:type sl:Language)
    (?classLanguage sl:subsetOf sl:JVMObject)
    (?file2 sl:hasRole technologies:Hibernate/HibernatePersistedObject)
]

[HibernateObjectDefinitionJavaMapping:
    print(HibernateObjectDefinitionJavaMapping)
    (?file sl:hasRole sl:HibernateMapping)
    (?file sl:elementOf sl:Java)
    (?file sl:hasReference ?class)
    GetClassLiteral(?class, ?classLanguage)
    ->
    (?file sl:defines ?classLanguage)
    (?classLanguage rdf:type sl:Language)
    (?classLanguage sl:subsetOf sl:JVMObject)
    (?file sl:hasRole technologies:Hibernate/HibernatePersistedObject)
]

[HibernateMappingFunctionDefinitionXML:
    print(HibernateMappingFunctionDefinitionXML)
    (?file sl:hasRole sl:HibernateMapping)
    (?file sl:elementOf sl:XML)
    HibernateGetMappingType(?file, ?function)
    ->
    (?file sl:defines ?function)
    (?function rdf:type sl:Function)
    (?function sl:partOf sl:OR-Mapping)
]

[HibernateMappingFunctionDefinitionJava:
    print(HibernateMappingFunctionDefinitionJava)
    (?fragment sl:hasRole sl:HibernateMapping)
    (?fragment sl:elementOf sl:Language/JavaAnnotatedElement)
    (?fragment sl:partOf ?file)
    (?file sl:elementOf sl:Java)
    HibernateGetMappingType(?file, ?function)
    ->
    (?fragment sl:defines ?function)
    (?function rdf:type sl:Function)
    (?function sl:partOf sl:OR-Mapping)
]

[HibernateMappingConfFunctionDefinition:
    print(HibernateMappingConfFunctionDefinition)
    (?file sl:hasRole technologies:Hibernate/HibernateConfiguration)
    ->
    (?file sl:defines sl:OR-Mapping)
]
[HibernateMappingFunctionXMLInputDefinition:
    print(HibernateMappingFunctionXMLInputDefinition)
    (?mappingFile sl:elementOf sl:XML)
    (?mappingFile sl:defines ?function)
    (?function sl:partOf sl:OR-Mapping)
    (?mappingFile sl:refersTo ?className)
    (?file sl:hasReference ?className)
    (?file sl:defines ?language)
    ->
    (?language sl:input ?function)
]

[HibernateMappingFunctionJavaInputDefinition:
    print(HibernateMappingFunctionJavaInputDefinition)
    (?fragment sl:hasRole sl:HibernateMapping)
    (?fragment sl:elementOf sl:Language/JavaAnnotatedElement)
    (?fragment sl:partOf ?file)
    (?fragment sl:defines ?function)
    (?function sl:partOf sl:OR-Mapping)
    (?file sl:defines ?language)
    ->
    (?language sl:input ?function)
]


[HibernateMappingReferencedTables:
    print(HibernateMappingReferencedTables)
    (?file sl:hasRole sl:HibernateMapping)
    (?file sl:elementOf sl:XML)
    HibernateMappingGetTable(?file, ?table)
    ->
    (?file sl:HibernateMappingRefersToRelationalTable ?table)
]

[HibernateMappingJavaCorrespondsToTable:
    print(HibernateMappingJavaCorrespondsToTable)
    (?file sl:hasRole sl:HibernateMapping)
    (?file sl:HibernateMappingRefersToRelationalTable ?tableUI)
    (?tableUI sl:elementOf sl:Language/ReferenceLanguage)
    (?tableUI sl:partOf ?fragment)
    (?fragment sl:elementOf sl:Language/SQLCreateTableStmt)
    (?file sl:refersTo ?class)
    (?javaFile sl:hasReference ?class)
    ->
    (?javaFile sl:correspondsTo ?fragment)
]

[RelationalLanguageDefinition:
    print(RelationalLanguageDefinition)
    (?fragment sl:elementOf sl:Language/SQLCreateTableStmt)
    (?tableName sl:partOf ?fragment)
    (?tableName sl:elementOf sl:Language/ReferenceLanguage)
    GetTableLiteral(?tableName, ?relationalLanguage)
    ->
    (?fragment sl:defines ?relationalLanguage)
    (?relationalLanguage rdf:type sl:Language)
    (?relationalLanguage sl:partOf sl:RelationalDatabase)
]

[HibernateMappingOutput:
    print(HibernateMappingOutput)
    (?file sl:hasRole sl:HibernateMapping)
    (?file sl:defines ?function)
    (?file sl:HibernateMappingRefersToRelationalTable ?table)
    (?table sl:partOf ?sqlFragment)
    (?sqlFragment sl:defines ?relationalLanguage)
    ->
    (?function sl:output ?relationalLanguage)
]
[ExtractAndParseCreateStmts:
    print(ExtractAndParseCreateStmts)
    (?file sl:elementOf sl:SQL)
    ->
    CreateStmtExtraction(?file)
]
[GetTableUri:
    print(GetTableUri)
    (?fragment sl:elementOf sl:Language/SQLCreateTableStmt)
    ->
    RetrieveTableURI(?fragment)
]
[CheckAnnotationHibernate:
    print(CheckAnnotationHibernate)
    (?file sl:elementOf sl:Java)
    CheckLiteralImported(?file, "javax.persistence")
    ->
    HibernateAnnotationDetection(?file)
]

